version: 2.1
jobs:
  compilation:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:1.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - checkout
      - run:
          name: Run pre-compile checks
          command: ./scripts/run-pre-build-checks
      - run:
          name: Start Gradle daemon
          command: ./gradlew
      - run:
          name: Check formatting
          command: ./gradlew spotlessCheck
      - run:
          name: Compile production code
          # Given the RAM limits on CI (4GB), max-workers=2 is necessary to prevent OOMs.
          command: ./gradlew --max-workers=2 compileJava
      - persist_to_workspace:
          root: .
          paths: [ '*' ]


  code-analize:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:1.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run post-compile checks
          command: ./scripts/verify-no-string-interpolation-leftovers
      - run:
          name: Run static code analyzer
          command: ./gradlew --warn checkstyleMain
      - run:
          name: Check Javadoc correctness
          # Given the RAM limits on CI (4GB), max-workers=2 is necessary to prevent OOMs.
          command: ./gradlew --max-workers=2 javadoc


  backend-tests:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:1.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Compile tests
          command: ./gradlew compileTestJava
      - run:
          name: Run backend tests
          command: ./gradlew test
      # Unfortunately, wildcards for test result paths aren't supported by CircleCI yet.
      - store_test_results:
          path: branchLayoutImpl/build/test-results/
      - store_test_results:
          path: backendImpl/build/test-results/


  build-plugin-artifact:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:1.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build plugin artifact
          command: ./gradlew buildPlugin
      - store_artifacts:
          path: build/distributions/
          destination: .
      - persist_to_workspace:
          root: .
          paths: [ '*' ]


  verify-plugin-artifact:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:1.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Verify plugin artifact contents
          command: ./scripts/verify-artifact-contents
      - run:
          name: Verify binary compatibility with supported IntelliJ versions
          command: ./scripts/verify-binary-compatibility

  ui-tests-2020_1:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:1.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run UI tests against 2020.1 (earliest supported)
          command: ./scripts/run-ui-tests 2020.1


  # Skipping 2020.1.4 to speed up the build; the risk of 2020.1.x failing when both 2020.1 & 2020.2 pass is minuscule.


  ui-tests-2020_2:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:1.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - attach_workspace:
            at: .
      - run:
          name: Run UI tests against 2020.2 (latest stable & our build target)
          command: ./scripts/run-ui-tests 2020.2
      - store_test_results:
          path: uiTests/build/ui-test-results/


  release:
    docker:
      - image: gitmachete/intellij-plugin-ci
    working_directory: ~/git-machete-intellij-plugin
    steps:
      # No checkout, just attaching the workspace from the build job.
      - attach_workspace:
          at: .
      - run:
          # It was hard to make `git push`/`hub pull-request` to work with SSH repo access in CI.
          name: Reconfigure origin remote to https
          command: git remote set-url origin https://${GITHUB_TOKEN}@github.com/VirtusLab/git-machete-intellij-plugin.git
      - deploy:
          name: Push git tag
          command: |
            source scripts/utils.sh
            tag=v$(extract_version_from_current_wd)
            git tag "$tag"
            git push origin "$tag"
      - deploy:
          name: Create GitHub release
          command: |
            source scripts/utils.sh
            tag=v$(extract_version_from_current_wd)
            hub release create \
              --attach build/distributions/git-machete-intellij-plugin-*.zip \
              --message "$tag"$'\n\n'"$(<CHANGE-NOTES.html)" \
              $tag
      - deploy:
          name: Open backport PR to develop
          command: |
            source scripts/utils.sh
            version=$(extract_version_from_current_wd)
            branch=backport/v$version
            git checkout -b "$branch"
            git push origin "$branch"
            hub pull-request \
              --no-edit \
              --base=develop \
              --message="Backport release of v$version to develop" \
              --labels=backport
      - deploy:
          name: Publish plugin to Jetbrains Marketplace
          # TODO (#391): prevent partial recompilation of the project in the `release` job
          command: ./gradlew --max-workers=2 publishPlugin


workflows:
  version: 2
  workflow:
    jobs:
      - compilation

      - code-analize:
          requires: [compilation]
      - backend-tests:
          requires: [compilation]
      - build-plugin-artifact:
          requires: [compilation]

      - verify-plugin-artifact:
          requires: [build-plugin-artifact]
      - ui-tests-2020_1:
          requires: [build-plugin-artifact]
      - ui-tests-2020_2:
          requires: [ build-plugin-artifact ]

      - hold: # A job that will require manual approval in the CircleCI web application.
          type: approval
          requires: [code-analize, backend-tests, verify-plugin-artifact, ui-tests-2020_1, ui-tests-2020_2]
          filters:
            branches:
              only: master
      - release:
          requires: [hold]
          filters:
            branches:
              only: master
