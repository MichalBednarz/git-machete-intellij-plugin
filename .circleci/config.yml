version: 2.1
jobs:
  build:
    docker:
      - image: 'gitmachete/intellij-plugin-ci:3.0.0'
    working_directory: ~/git-machete-intellij-plugin
    steps:
      - checkout
      - run:
          name: Run pre-compile checks
          command: ./scripts/run-pre-build-checks
      - run:
          name: Validate Markdown links
          command: |
            # mlc = Markdown Link Checker
            curl -fsL https://github.com/becheran/mlc/releases/download/v0.13.7/mlc-x86_64-linux -o /usr/local/bin/mlc
            chmod +x /usr/local/bin/mlc
            mlc --markup-types=md .

      - restore_cache:
          # Adding `-v1` suffix to enable easy cache invalidation when needed (just change to `-v2`)
          keys:
            # First, try finding a cache entry with the same set of libraries
            # that also comes from the same branch (so as to make the best use of Gradle compilation cache).
            - gradle-deps-v1-{{ checksum "build.gradle" }}-{{ .Branch }}
            # If the above key is not found, try finding a cache entry with the same set of libraries
            # coming from another branch (Gradle compilation cache might then be less useful).
            - gradle-deps-v1-{{ checksum "build.gradle" }}-
            # If both above keys are not found, instead find the most recently generated cache from any branch.
            - gradle-deps-v1-

      - run:
          name: Start Gradle daemon
          command: ./gradlew
      - run:
          name: Check formatting
          command: ./gradlew spotlessCheck
      - run:
          name: Compile production code
          # Given the RAM limits on CI (4GB), max-workers=2 is necessary to prevent OOMs.
          command: ./gradlew --max-workers=2 compileJava
      - run:
          name: Run post-compile checks
          command: ./scripts/verify-no-string-interpolation-leftovers
      - run:
          name: Run static code analyzer
          command: ./gradlew --warn checkstyleMain
      - run:
          name: Check Javadoc correctness
          # Given the RAM limits on CI (4GB), max-workers=2 is necessary to prevent OOMs.
          command: ./gradlew --max-workers=2 javadoc

      - run:
          name: Compile tests
          command: ./gradlew compileTestJava
      - run:
          name: Install git-machete CLI
          command: |
            cli_version=$(grep -o '[^,=]*$' backendImpl/src/test/resources/reference-cli-version.properties)
            pip3 install git-machete==$cli_version
      - run:
          name: Run backend tests
          command: ./gradlew test
      # Unfortunately, wildcards for test result paths aren't supported by CircleCI yet.
      - store_test_results:
          path: branchLayoutImpl/build/test-results/
      - store_test_results:
          path: backendImpl/build/test-results/

      - save_cache:
          paths: [ ~/.gradle/ ]
          key: gradle-deps-v1-{{ checksum "build.gradle" }}-{{ .Branch }}

      - run:
          name: Build plugin artifact
          command: ./gradlew buildPlugin
      - store_artifacts:
          path: build/distributions/
          destination: .
      - run:
          name: Verify plugin artifact contents
          command: ./scripts/verify-artifact-contents
      - run:
          name: Verify binary compatibility with supported IntelliJ versions
          command: ./scripts/verify-binary-compatibility

      - run:
          name: Run UI tests against 2020.1 (earliest supported)
          command: ./scripts/run-ui-tests 2020.1
      # Skipping 2020.1.4 to speed up the build; the risk of 2020.1.x failing when both 2020.1 & 2020.2 pass is minuscule.
      - run:
          name: Run UI tests against 2020.2.2 (latest stable & our build target)
          command: ./scripts/run-ui-tests 2020.2.2
      - store_test_results:
          path: uiTests/build/ui-test-results/

      - when:
          condition:
            equal: [ master, << pipeline.git.branch >> ]
          steps:
            - deploy:
                # Publishing should be the first step since if it fails, we should NOT proceed opening backport PR/GitHub release etc.
                name: Publish plugin to Jetbrains Marketplace
                command: ./gradlew --max-workers=2 publishPlugin
            - deploy:
                # It was hard to make `git push`/`hub pull-request` to work with SSH repo access in CI.
                name: Reconfigure origin remote to https
                command: git remote set-url origin https://${GITHUB_TOKEN}@github.com/VirtusLab/git-machete-intellij-plugin.git
            - deploy:
                name: Push git tag
                command: |
                  source scripts/utils.sh
                  tag=v$(extract_version_from_current_wd)
                  git tag "$tag"
                  git push origin "$tag"
            - deploy:
                name: Create GitHub release
                # Implicit usage of ${GITHUB_TOKEN} by hub
                command: |
                  source scripts/utils.sh
                  tag=v$(extract_version_from_current_wd)
                  # Newlines (<br/>) are necessary for better layout on Marketplace, but make the formatting worse on GitHub
                  change_notes=$(sed '/^<br.>$/d' CHANGE-NOTES.html)
                  hub release create \
                    --attach build/distributions/git-machete-intellij-plugin-*.zip \
                    --message "$tag"$'\n\n'"$change_notes" \
                    $tag
            - deploy:
                name: Open backport PR to develop
                # Implicit usage of ${GITHUB_TOKEN} by hub
                command: |
                  source scripts/utils.sh
                  version=$(extract_version_from_current_wd)
                  branch=backport/v$version
                  git checkout -b "$branch"
                  git push origin "$branch"

                  # In case of a PR build, CI_PULL_REQUEST should be a link of the form https://github.com/VirtusLab/git-machete-intellij-plugin/pull/123
                  pr_num=${CI_PULL_REQUEST##*/}
                  milestone=$(hub pr show --format=%Mn $pr_num)
                  reviewers=$(hub pr show --format=%rs $pr_num | tr -d ' ')
                  assignees=$(hub pr show --format=%as $pr_num | tr -d ' ')
                  hub pull-request \
                    --no-edit \
                    --base=develop \
                    --message="Backport release of v$version to develop" \
                    --labels=backport \
                    --assign $assignees \
                    --milestone $milestone \
                    --reviewer $reviewers
